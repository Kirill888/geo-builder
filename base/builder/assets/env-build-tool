#!/bin/bash

set -o errexit
set -o noclobber
set -o pipefail
set -o nounset

CC_GDAL=/opt/constraints-gdal.txt
ENV0=/opt/env0
MK=/opt/compile-wheels.mk
_NOBINARY_GEO=/conf/nobinary-geo.txt

env_bootstrap_libs="pip setuptools wheel"

# remove comments (#) and empty lines and trailing/leading whitespaces
uncomment () {
    awk '!/^[[:blank:]]*#/ && \
         !/^[[:blank:]]*$/\
    {gsub(/^[[:blank:]]*/, ""); \
    gsub(/[[:blank:]]*$/, "");\
    gsub(/#.*$/, "");\
    print $0}'
}

# if BINARY_ONLY=yes print nothing
#
# - /conf/nobinary.txt (if exists)
# - $NOBINARY pointing to a file
# - $NOBINARY with embedded content
get_nobinary () {
    local nobin="${NOBINARY:-}"
    if [ "${BINARY_ONLY:-}" = "yes" ]; then
        return 0
    fi

    [[ ! -e "${_NOBINARY_GEO}" ]] || uncomment < "${_NOBINARY_GEO}"

    if [ -n "${nobin}" ]; then
        if [ -f "${nobin}" ]; then
            uncomment < "${nobin}"
        else
            echo "${nobin}" | uncomment
        fi
    fi
}

# construct and print --no-binary=lib,lib2, option, or "" if not set
get_nobinary_cmdline () {
    local nobin=$(get_nobinary)
    if [ -n "${nobin}" ]; then
        echo "${nobin}" | awk 'BEGIN {ORS=""; print "--no-binary="; ORS=","}{print $1}'
    fi
}

# download wheels/sorces from requirements.txt and constraints
cmd_download () {
    local requirements="${1:-/conf/requirements.txt}"
    local constraints="${2:-/conf/constraints.txt}"
    local dst_wheels="${3:-./}"

    local pip="${ENV0}/bin/python -m pip"

    if [[ $# < 3 ]]; then
        shift $#
    else
        shift 3
    fi

    $pip download \
         --constraint="${CC_GDAL}" \
         --constraint="${constraints}" \
         --requirement="${requirements}" \
         --dest="${dst_wheels}" \
         --no-build-isolation \
         $(get_nobinary_cmdline) \
         $@
}

# compile source files in a directory
cmd_compile () {
   local wheels="${1:-/.}"
   if [[ $# > 0 ]]; then
       shift 1
   fi

   make -f "${MK}" -C ${wheels} extra="$@" -j$(nproc)
}

# 1. download wheels/sources from requirements.txt
# 2. compile source distributions into wheels
cmd_wheels () {
    local requirements="${1:-/conf/requirements.txt}"
    local constraints="${2:-/conf/constraints.txt}"
    local dst_wheels="${3:-./}"

    if [[ $# < 3 ]]; then
        shift $#
    else
        shift 3
    fi

    echo "Downloading wheels/sources"
    cmd_download "${requirements}" "${constraints}" "${dst_wheels}" $@
    echo "Compiling sources on $(nproc) core[s]"
    cmd_compile ${dst_wheels} $@
}

# Given path to manylinux wheel build local lib instead
#  1. download source package for this lib from pypi
#  2. compile it to a wheel
cmd_pkg-recompile () {
    local src="$1"
    local dst="${2:-$(dirname $src)}"
    local pip="${ENV0}/bin/python -m pip"

    if [[ $# < 2 ]]; then
        shift $#
    else
        shift 2
    fi


    echo $(basename "${src}") | awk -F - '{print $1, $2}'| (
        read lib version
        echo "Processing ${lib}==$version in ${dst}"
        $pip download -d "${dst}" --no-deps --no-build-isolation --no-binary=$lib $lib==$version

        lib_src=$(find "${dst}" -name "${lib}-${version}"'.*' | head -1)
        echo "Compiling ${lib_src}"
        $pip wheel --no-deps -w "${dst}" "${lib_src}" $@
    )
}

cmd_list-manylinux-wheels() {
    local wheels="${1:-./}"
    shift
    if [[ $# < 1 ]]; then
        find "${wheels}" -iname "*-"'*manylinux*.whl'
    else
        for lib in $@; do
            find "${wheels}" -iname "${lib}-"'*manylinux*.whl'
        done
    fi
}


# Construct environment from /wheels folder only, no downloads
#
cmd_new_no_index () {
    local requirements="${1:-/conf/requirements.txt}"
    local constraints="${2:-/conf/constraints.txt}"
    local env="${3:-/env}"
    local wheels="${4:-./}"

    if [[ $# < 4 ]]; then
        shift $#
    else
        shift 4
    fi

    BINARY_ONLY=yes cmd_new $requirements $constraints $env --find-links="${wheels}" --no-index
}


# Construct environment from requirements.txt and constraints.txt
#
cmd_new () {
    local requirements="${1:-/conf/requirements.txt}"
    local constraints="${2:-/conf/constraints.txt}"
    local env="${3:-/env}"

    if [[ $# < 3 ]]; then
        shift $#
    else
        shift 3
    fi

    mkdir -p "${env}"
    python3 -m venv "${env}"
    local pip="${env}/bin/python -m pip"

    $pip install --upgrade $env_bootstrap_libs

    $pip install \
        --constraint="${CC_GDAL}" \
        $(get_nobinary_cmdline) \
        --constraint="${constraints}" \
        --requirement="${requirements}" \
        $@
}

# Add more libraries to an existing python env
#
cmd_extend () {
    local requirements="${1:-/conf/requirements.txt}"
    local constraints="${2:-/conf/constraints.txt}"
    local env="${3:-/env}"
    local pip="${env}/bin/python -m pip"

    if [[ $# < 3 ]]; then
        shift $#
    else
        shift 3
    fi

    $pip install \
         --constraint="${CC_GDAL}" \
         --constraint="${constraints}" \
         --requirement="${requirements}" \
         $@
}

cmd_help () {
    echo 'env-build-tool <wheels|new|new_no_index|extend|help> ARGS

Download or compile the required wheels into `wheel_dir`
  > env-build-tool download|wheels <requirements.txt> <constraints.txt> <wheel_dir:./> <other-args-for-pip>

Compile source distributions in a directory
  > env-build-tool compile <wheel_dir:./>

Make a new python environment from the requirements and constraints
  > env-build-tool new <requirements.txt> <constraints.txt> <env:/env> <other-args-for-pip>

Extend existing python environment using requirements and constraints
  > env-build-tool extend <requirements.txt> <constraints.txt> <env:/env> <other-args-for-pip>

Make a new python environment from the requirements and wheels_dir (No Downloads)
  > env-build-tool new_no_index <requirements.txt> <constraints.txt> <env:/env> <wheel_dir:./> <other-args-for-pip>

Recompile manylinux wheel
  > env-build-tool pkg-recompile <path-to-wheel-file> [<dst_dir>] <other-args-for-pip>

List manylinux wheels in a folder
  > env-build-tool list-manylinux-wheels
'
}


cmd_main () {
   local cmd="${1:-help}"
   shift || true # Always succeed, so that we display help text on no args

   case "${cmd}" in
       wheels|download|compile|new|extend|pkg-recompile|new_no_index|list-manylinux-wheels|help)
           "cmd_${cmd}" $@
           ;;
       *)
           echo "ERROR: No such command \"${cmd}\""
           echo
           cmd_help
           exit 1
           ;;
   esac
}

cmd_main $@
